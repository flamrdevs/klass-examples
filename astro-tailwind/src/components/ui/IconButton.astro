---
import type { HTMLTag, Polymorphic } from "astro/types";

import propsplit from "propsplit";

import type { VariantsOf } from "@klass/core";
import { klass } from "./setup";

const variant = klass({
  base: ["inline-flex items-center justify-center outline-none rounded-xl", "focus-visible:ring-2 focus-visible:ring-offset-2"],
  variants: {
    color: {
      neutral: [
        "bg-neutral-3 text-neutral-11",
        "hover:bg-neutral-4",
        "active:bg-neutral-5",
        "focus-visible:ring-neutral-6 focus-visible:ring-offset-neutral-1",
      ],
      primary: [
        "bg-primary-3 text-primary-11",
        "hover:bg-primary-4",
        "active:bg-primary-5",
        "focus-visible:ring-primary-6 focus-visible:ring-offset-primary-1",
      ],
    },
    size: {
      sm: ["w-9 h-9", "font-medium text-base"],
      md: ["w-10 h-10", "font-medium text-base"],
      lg: ["w-11 h-11", "font-bold text-lg"],
    },
  },
  defaults: {
    color: "neutral",
    size: "md",
  },
});

type Props<T extends HTMLTag = "button"> = Polymorphic<{ as: T } & VariantsOf<typeof variant>>;

const { as: As = "button", class: _class, "class:list": classList, ...props } = Astro.props;

const [vk, rest] = propsplit(props, variant.vk);
---

<As type="button" {...rest as any} class={variant(vk, [_class, classList])}>
  <slot />
</As>
